Administration Concession System Authorization Service
========================================================

The Authorization Microservice is a core component of the Administration Concession System. It handles authentication, authorization, and user management processes, which are essential for maintaining secure access and operational control. This microservice also integrates with the CRM system to share user data and operational events.

.. image:: ../_static/administration_concession_system/services_administration_concession_system/authorisation_service/container/authorization_microservice_-_detailed_container_diagram_with_registerconcessioncommand.png
   :alt: Detailed Container Diagram of Authorization Microservice
   :align: center
 

API Documentation
-----------------

Commands
--------

**UserLoginCommand**

- **Description**: Initiates the process of logging a user into the system.
- **Request URL**: `/api/auth/login`
- **Method**: `POST`
- **Request Body**:
  - `username` (string, required): The username of the user.
  - `password` (string, required): The password of the user.
- **Response**:
  - `token` (string): A JWT token for authenticated sessions.
  - `expiresIn` (int): Expiration time of the token in seconds.
- **Events Triggered**: `UserLoggedInEvent`

**UserLogoutCommand**

- **Description**: Initiates the process of logging a user out of the system.
- **Request URL**: `/api/auth/logout`
- **Method**: `POST`
- **Request Body**: None
- **Response**:
  - `message` (string): Confirmation message that the user has been logged out.
- **Events Triggered**: `UserLoggedOutEvent`


**RevokeAccessTokenCommand**

- **Description**: Revokes a user's access token, invalidating their current session.
- **Request URL**: `/api/auth/revoke-token`
- **Method**: `POST`
- **Request Body**:
  - `token` (string, required): The access token to be revoked.
- **Response**:
  - `message` (string): Confirmation message that the token has been revoked.
- **Events Triggered**: `UserLoggedOutEvent`

**ResetPasswordCommand**

- **Description**: Resets the password for a user's account.
- **Request URL**: `/api/auth/reset-password`
- **Method**: `POST`
- **Request Body**:
  - `email` (string, required): The email associated with the user's account.
- **Response**:
  - `message` (string): Confirmation that a password reset email has been sent.
- **Events Triggered**: `PasswordResetEvent`

**Enable2FACommand**

- **Description**: Enables Two-Factor Authentication (2FA) for a user's account.
- **Request URL**: `/api/auth/enable-2fa`
- **Method**: `POST`
- **Request Body**:
  - `userId` (string, required): The ID of the user enabling 2FA.
  - `token` (string, required): The 2FA token generated by the user's authenticator app.
- **Response**:
  - `message` (string): Confirmation that 2FA has been enabled.
- **Events Triggered**: `TwoFactorEnabledEvent`

**Disable2FACommand**

- **Description**: Disables Two-Factor Authentication (2FA) for a user's account.
- **Request URL**: `/api/auth/disable-2fa`
- **Method**: `POST`
- **Request Body**:
  - `userId` (string, required): The ID of the user disabling 2FA.
- **Response**:
  - `message` (string): Confirmation that 2FA has been disabled.
- **Events Triggered**: `TwoFactorDisabledEvent`

**VerifyEmailCommand**

- **Description**: Initiates the process of verifying a user's email address.
- **Request URL**: `/api/auth/verify-email`
- **Method**: `POST`
- **Request Body**:
  - `userId` (string, required): The ID of the user verifying their email.
  - `emailToken` (string, required): The token sent to the user's email.
- **Response**:
  - `message` (string): Confirmation that the email has been verified.
- **Events Triggered**: `EmailVerifiedEvent`, `EmailVerificationFailedEvent`

**RegisterConcessionCommand**

- **Description**: Registers a new concession within the system.
- **Request URL**: `/api/auth/register-concession`
- **Method**: `POST`
- **Request Body**:
  - `concessionName` (string, required): The name of the concession.
  - `adminEmail` (string, required): The email of the concession's administrator.
- **Response**:
  - `message` (string): 200 -- Confirmation that the concession has been registered.
- **Events Triggered**: `ConcessionRegisteredEvent`

Queries
-------

**GetUserPermissionsQuery**

- **Description**: Retrieves the permissions associated with a user.
- **Request URL**: `/api/auth/get-user-permissions`
- **Method**: `GET`
- **Request Parameters**:
  - `userId` (string, required): The ID of the user whose permissions are being retrieved.
- **Response**:
  - `permissions` (array of strings): A list of permissions associated with the user.

**GetUserDetailsQuery**

- **Description**: Fetches the details of a specific user.
- **Request URL**: `/api/auth/get-user-details`
- **Method**: `GET`
- **Request Parameters**:
  - `userId` (string, required): The ID of the user whose details are being fetched.
- **Response**:
  - `userId` (string): The ID of the user.
  - `username` (string): The username of the user.
  - `email` (string): The email of the user.
  - `roles` (array of strings): A list of roles assigned to the user.

**Get2FAStatusQuery**

- **Description**: Retrieves the 2FA (Two-Factor Authentication) status of a user.
- **Request URL**: `/api/auth/get-2fa-status`
- **Method**: `GET`
- **Request Parameters**:
  - `userId` (string, required): The ID of the user whose 2FA status is being retrieved.
- **Response**:
  - `is2FAEnabled` (boolean): Indicates whether 2FA is enabled for the user.


Inbox Events
------------

The Authorization Microservice processes the following inbox events:

**ChangeUserRightsEvent**

- **Description**: An event that triggers when a user's rights are changed within the CRM system.
- **Source**: CRM System -- Leads summary/managenent service (External CRM event bus brigged to Administration concession system).
- **Actions**: Updates the user's permissions within the Administration Concession System to reflect the changes made in the CRM system.

**BlockUserAccessEvent**

- **Description**: An event that triggers when a user is blocked or suspended in the CRM system.
- **Source**: CRM System -- Leads summary/managenent service  (External CRM event bus brigged to Administration concession system).
- **Actions**: Immediately revokes the user's access to the Administration Concession System, ensuring that the block is enforced across systems.

**UnBlockUserAccessEvent**

- **Description**: An event that triggers when a user is unblocked in case of being suspended in the CRM system.
- **Source**: CRM System -- Leads summary/managenent service  (External CRM event bus brigged to Administration concession system).
- **Actions**: Immediately revokes the user's access to the Administration Concession System, ensuring that the block is enforced across systems.


Outbox Events
-------------

The Authorization Microservice emits the following outbox events:

**UserLoggedInEvent**

- **Description**: Emitted after a successful user login within the Administration Concession System.
- **Destination**: Administration Concession system Internal operation serivce, CRM System Leads Summary Service (leads hub connector service), CRM GRPC intergnal operations service.
- **Actions**: Notifies the Administration Concession Administrator user and CRM system user of the user's login, updates session details.

**User2FaAccessTokenGenerated**

- **Description**: Emitted after a successful user login within the password and login to  the Administration Concession System but having the 2fa enabled.
- **Destination**: Administration Concession system Notification service, Administration Concession System Internal Operations service.
- **Actions**: Required Noitification service Event Emition to pass the token generated back to User trying to sign-in, Notify Administration of Concession system of having the user trying to access the system with 2fa token.


**UserLoggedOutEvent**

- **Description**: Emitted after a user logs out within the Administration Concession System.
- **Destination**: Administration Concession system Accouns summary service, Administration Concession System Internal Operations Service, CRM Internal Operaions service.
- **Actions**: Notifies the CRM system that the user has logged out (updated leads connection hub), updates session termination details.

**PasswordResetEvent**

- **Description**: Emitted after a user's password is reset within the Administration Concession System.
- **Destination**: CRM System Operation service, CRM leads summary service,  Administration Concession system Accouns summary service, Administration Concession System Internal Operations Service, CRM Internal Operaions service.
- **Actions**: Notifies the Administration Concession System administrator, CRM system of the specifi user (lead in the case of CRM) password reset, triggers notifications in Administration Concession System Notifcation service (which will be possibly passed to Email Service), and updates security logs.

**TwoFactorEnabledEvent**

- **Description**: Emitted after Two-Factor Authentication is enabled for a user within the Administration Concession System.
- **Destination**: CRM System Operation service, CRM leads summary service,  Administration Concession system Accouns summary service, Administration Concession System Internal Operations Service, CRM Internal Operaions service. .
- **Actions**: Notifies the Administration Concession System administrator, CRM system of the specifi user update, updates user security settings, and ensures that 2FA is enforced consistently across AConS.

**TwoFactorDisabledEvent**

- **Description**: Emitted after Two-Factor Authentication is disabled for a user within the Administration Concession System.
- **Destination**: CRM System Operation service, CRM leads summary service,  Administration Concession system Accouns summary service, Administration Concession System Internal Operations Service, CRM Internal Operaions service. .
- **Actions**: Notifies the Administration Concession System administrator, CRM system of the specifi user update, updates user security settings, and ensures that 2FA is enforced consistently across AConS.

**EmailVerifiedEvent**

- **Description**: Emitted when a user's email is successfully verified within the Administration Concession System.
- **Destination**: CRM System Operation service, CRM leads summary service,  Administration Concession system Accouns summary service, Administration Concession System Internal Operations Service, CRM Internal Operaions service. 
- **Actions**: Notifies the Administration Concession System administrator, CRM system of specific user (lead) email verification, updates the user's profile.

**EmailVerificationFailedEvent**

- **Description**: Emitted when a user's email verification fails within the Administration Concession System.
- **Destination**: CRM System Operation service, CRM leads summary service, Administration Concession system Accouns summary service, Administration Concession System Internal Operations Service, CRM Internal Operaions service. 
- **Actions**: Notifies the Administration Concession System administrator, CRM system of specific user (lead) failed verification, updates logs, and marks the user's email as unverified.

**ConcessionRegisteredEvent**

- **Description**: Emitted after a new concession is registered within the Administration Concession System.
- **Destination**: CRM System Orders service, Administration Concession system Accouns summary service, Administration Concession System Internal Operations Service, CRM Internal Operaions service. 
- **Actions**: Notifies the Administration Concession System administrator, CRM system of the new concession, triggers onboarding processes, and syncs concession details across systems.


Authorization Service Database Documentation
============================================

The `Authorization Service` manages the storage and retrieval of authentication, authorization, and user management data within the Administration Concession System. The database contains several key documents that are essential for handling user identities, permissions, and authentication mechanisms.

UserDocument
------------

Represents the core information related to a user in the system. This document is essential for managing user authentication, authorization, and profile details.

- **Id**: `Guid`
  - Unique identifier for the user.
- **Username**: `string`
  - The username chosen by the user.
- **Email**: `string`
  - The email address associated with the user's account.
- **Role**: `string`
  - The role assigned to the user (e.g., `Admin`, `User`).
- **PasswordHash**: `string`
  - The hashed password for the user's account.
- **CreatedAt**: `DateTime`
  - The timestamp when the user account was created.
- **IsEmailVerified**: `bool`
  - Indicates whether the user's email has been verified.
- **EmailVerificationToken**: `string`
  - The token used for verifying the user's email address.
- **EmailVerifiedAt**: `DateTime?`
  - The timestamp when the user's email was verified.
- **IsTwoFactorEnabled**: `bool`
  - Indicates whether Two-Factor Authentication (2FA) is enabled for the user.
- **TwoFactorSecret**: `string`
  - The secret key used for generating 2FA codes.

RefreshTokenDocument
--------------------

Stores the refresh tokens associated with a user's session. These tokens are used to renew access tokens without requiring the user to re-authenticate.

- **Id**: `Guid`
  - Unique identifier for the refresh token.
- **UserId**: `Guid`
  - The identifier of the user to whom the refresh token belongs.
- **Token**: `string`
  - The actual refresh token value.
- **CreatedAt**: `DateTime`
  - The timestamp when the refresh token was created.
- **RevokedAt**: `DateTime?`
  - The timestamp when the refresh token was revoked (if applicable).

UserResetTokenDocument
----------------------

Manages the tokens used for resetting a user's password. This document is crucial for handling the password reset flow securely.

- **Id**: `Guid`
  - Unique identifier for the reset token.
- **UserId**: `Guid`
  - The identifier of the user requesting the password reset.
- **ResetToken**: `string`
  - The token sent to the user for resetting their password.
- **ResetTokenExpires**: `DateTime?`
  - The expiration timestamp for the reset token.


PermissionsDocument
-------------------

Represents the permissions that a user has within the system. This document is crucial for determining the specific actions a user is allowed to perform based on the roles and permissions assigned to them.

- **Id**: `Guid`
  - Unique identifier for the permission entry.
- **UserId**: `Guid`
  - The identifier of the user to whom the permissions belong.
- **Permissions**: `IEnumerable<string>`
  - A list of permission strings that define the actions the user is allowed to perform (e.g., `ViewDashboard`, `EditConcession`, `ManageUsers`).
- **AssignedAt**: `DateTime`
  - The timestamp when these permissions were assigned to the user.
- **ExpiresAt**: `DateTime?`
  - The optional timestamp indicating when these permissions expire (if applicable).